#Teiknum ROC
ROCDraw <- function(df, modl) {
score <- predict(modl, type = "response")
y <- df$correct
#False positive rate
FPR <- 0
#true positive rate
TPR <- 0
#setjum upp threshold
threshold <- seq(from = 0, to = 1, by = 0.01)
# number of positive and negative
P <- sum(y)
N <- length(y) - P
#Iterate through all thresholds
for (j in 1:length(threshold)) {
FP <- 0
TP <- 0
thresh <- threshold[j]
for (i in 1:length(score)) {
if (score[i] >= thresh) {
if (y[i] == 1){
TP <- TP + 1
}
if (y[i] == 0){
FP <- FP + 1
}
}
}
FPR[j] <- FP/N
TPR[j] <- TP/P
}
#Reiknum AUC með trapezoid reglunni
auc <- -1 * trapz(FPR, TPR)
print(FPR)
print(TPR)
#Að lokum teiknum við aðeins upp
p <- data.frame(x = FPR, y = TPR) %>%
ggplot(aes(x = FPR, y = TPR)) +
geom_line() +
geom_line(data = data.frame(x = seq(0, 1, 0.01), y = seq(0, 1, 0.01))) +
labs(title = paste0("ROC curve, AUC = ", round(auc, digits = 4))) +
xlim("False Positive Rate") +
ylim("True Positive Rate")
return(p)
}
p1 <- ROCDraw(hashTest2, ans42)
p1
#Teiknum ROC
ROCDraw <- function(df, modl) {
score <- predict(modl, type = "response")
y <- df$correct
#False positive rate
FPR <- 0
#true positive rate
TPR <- 0
#setjum upp threshold
threshold <- seq(from = 0, to = 1, by = 0.01)
# number of positive and negative
P <- sum(y)
N <- length(y) - P
#Iterate through all thresholds
for (j in 1:length(threshold)) {
FP <- 0
TP <- 0
thresh <- threshold[j]
for (i in 1:length(score)) {
if (score[i] >= thresh) {
if (y[i] == 1){
TP <- TP + 1
}
if (y[i] == 0){
FP <- FP + 1
}
}
}
FPR[j] <- FP/N
TPR[j] <- TP/P
}
#Reiknum AUC með trapezoid reglunni
auc <- -1 * trapz(FPR, TPR)
print(FPR)
print(TPR)
#Að lokum teiknum við aðeins upp
p <- data.frame(x = FPR, y = TPR) %>%
ggplot(aes(x = FPR, y = TPR)) +
geom_line() +
geom_line(data = data.frame(x = seq(0, 1, 0.01), y = seq(0, 1, 0.01))) +
labs(title = paste0("ROC curve, AUC = ", round(auc, digits = 4))) +
xlab("False Positive Rate") +
ylab("True Positive Rate")
return(p)
}
p1 <- ROCDraw(hashTest2, ans42)
p1
#Teiknum ROC
ROCDraw <- function(df, modl) {
score <- predict(modl, type = "response")
y <- df$correct
#False positive rate
FPR <- 0
#true positive rate
TPR <- 0
#setjum upp threshold
threshold <- seq(from = 0, to = 1, by = 0.01)
# number of positive and negative
P <- sum(y)
N <- length(y) - P
#Iterate through all thresholds
for (j in 1:length(threshold)) {
FP <- 0
TP <- 0
thresh <- threshold[j]
for (i in 1:length(score)) {
if (score[i] >= thresh) {
if (y[i] == 1){
TP <- TP + 1
}
if (y[i] == 0){
FP <- FP + 1
}
}
}
FPR[j] <- FP/N
TPR[j] <- TP/P
}
#Reiknum AUC með trapezoid reglunni
auc <- -1 * trapz(FPR, TPR)
#Að lokum teiknum við aðeins upp
p <- data.frame(x = FPR, y = TPR) %>%
ggplot(aes(x = FPR, y = TPR)) +
geom_line() +
geom_line(data = data.frame(x = seq(0, 1, 0.01), y = seq(0, 1, 0.01)), aes(x = x, y = y)) +
labs(title = paste0("ROC curve, AUC = ", round(auc, digits = 4))) +
xlab("False Positive Rate") +
ylab("True Positive Rate")
return(p)
}
p1 <- ROCDraw(hashTest2, ans42)
p1
?geom_line
#Teiknum ROC
ROCDraw <- function(df, modl) {
score <- predict(modl, type = "response")
y <- df$correct
#False positive rate
FPR <- 0
#true positive rate
TPR <- 0
#setjum upp threshold
threshold <- seq(from = 0, to = 1, by = 0.01)
# number of positive and negative
P <- sum(y)
N <- length(y) - P
#Iterate through all thresholds
for (j in 1:length(threshold)) {
FP <- 0
TP <- 0
thresh <- threshold[j]
for (i in 1:length(score)) {
if (score[i] >= thresh) {
if (y[i] == 1){
TP <- TP + 1
}
if (y[i] == 0){
FP <- FP + 1
}
}
}
FPR[j] <- FP/N
TPR[j] <- TP/P
}
#Reiknum AUC með trapezoid reglunni
auc <- -1 * trapz(FPR, TPR)
#Að lokum teiknum við aðeins upp
p <- data.frame(x = FPR, y = TPR) %>%
ggplot(aes(x = FPR, y = TPR)) +
geom_line() +
geom_line(data = data.frame(x = seq(0, 1, 0.01), y = seq(0, 1, 0.01)), aes(x = x, y = y, linetype = "dashed")) +
labs(title = paste0("ROC curve, AUC = ", round(auc, digits = 4))) +
xlab("False Positive Rate") +
ylab("True Positive Rate")
return(p)
}
p1 <- ROCDraw(hashTest2, ans42)
p1
#Teiknum ROC
ROCDraw <- function(df, modl) {
score <- predict(modl, type = "response")
y <- df$correct
#False positive rate
FPR <- 0
#true positive rate
TPR <- 0
#setjum upp threshold
threshold <- seq(from = 0, to = 1, by = 0.01)
# number of positive and negative
P <- sum(y)
N <- length(y) - P
#Iterate through all thresholds
for (j in 1:length(threshold)) {
FP <- 0
TP <- 0
thresh <- threshold[j]
for (i in 1:length(score)) {
if (score[i] >= thresh) {
if (y[i] == 1){
TP <- TP + 1
}
if (y[i] == 0){
FP <- FP + 1
}
}
}
FPR[j] <- FP/N
TPR[j] <- TP/P
}
#Reiknum AUC með trapezoid reglunni
auc <- -1 * trapz(FPR, TPR)
#Að lokum teiknum við aðeins upp
p <- data.frame(x = FPR, y = TPR) %>%
ggplot(aes(x = FPR, y = TPR)) +
geom_line(color = "orange") +
geom_line(data = data.frame(x = seq(0, 1, 0.01), y = seq(0, 1, 0.01)), aes(x = x, y = y), linetype = "dashed") +
labs(title = paste0("ROC curve, AUC = ", round(auc, digits = 4))) +
xlab("False Positive Rate") +
ylab("True Positive Rate")
return(p)
}
p1 <- ROCDraw(hashTest2, ans42)
p1
?area
?geom_area
#Teiknum ROC
ROCDraw <- function(df, modl) {
score <- predict(modl, type = "response")
y <- df$correct
#False positive rate
FPR <- 0
#true positive rate
TPR <- 0
#setjum upp threshold
threshold <- seq(from = 0, to = 1, by = 0.01)
# number of positive and negative
P <- sum(y)
N <- length(y) - P
#Iterate through all thresholds
for (j in 1:length(threshold)) {
FP <- 0
TP <- 0
thresh <- threshold[j]
for (i in 1:length(score)) {
if (score[i] >= thresh) {
if (y[i] == 1){
TP <- TP + 1
}
if (y[i] == 0){
FP <- FP + 1
}
}
}
FPR[j] <- FP/N
TPR[j] <- TP/P
}
#Reiknum AUC með trapezoid reglunni
auc <- -1 * trapz(FPR, TPR)
#Að lokum teiknum við aðeins upp
p <- data.frame(x = FPR, y = TPR) %>%
ggplot(aes(x = FPR, y = TPR)) +
geom_line(color = "orange") +
geom_area(fill = "lightblue")+
geom_line(data = data.frame(x = seq(0, 1, 0.01), y = seq(0, 1, 0.01)), aes(x = x, y = y), linetype = "dashed") +
labs(title = paste0("ROC curve, AUC = ", round(auc, digits = 4))) +
xlab("False Positive Rate") +
ylab("True Positive Rate") +
xlim(0, 1) +
ylim(0, 1)
return(p)
}
p1 <- ROCDraw(hashTest2, ans42)
p1
#Teiknum ROC
ROCDraw <- function(df, modl) {
score <- predict(modl, type = "response")
y <- df$correct
#False positive rate
FPR <- 0
#true positive rate
TPR <- 0
#setjum upp threshold
threshold <- seq(from = 0, to = 1, by = 0.01)
# number of positive and negative
P <- sum(y)
N <- length(y) - P
#Iterate through all thresholds
for (j in 1:length(threshold)) {
FP <- 0
TP <- 0
thresh <- threshold[j]
for (i in 1:length(score)) {
if (score[i] >= thresh) {
if (y[i] == 1){
TP <- TP + 1
}
if (y[i] == 0){
FP <- FP + 1
}
}
}
FPR[j] <- FP/N
TPR[j] <- TP/P
}
#Reiknum AUC með trapezoid reglunni
auc <- -1 * trapz(FPR, TPR)
#Að lokum teiknum við aðeins upp
p <- data.frame(x = FPR, y = TPR) %>%
ggplot(aes(x = FPR, y = TPR)) +
geom_line(color = "orange") +
geom_area(fill = "lightblue")+
geom_line(data = data.frame(x = seq(0, 1, 0.01), y = seq(0, 1, 0.01)), aes(x = x, y = y), linetype = "dashed") +
labs(title = paste0("ROC curve, AUC = ", round(auc, digits = 4))) +
xlab("False Positive Rate") +
ylab("True Positive Rate") +
coord_cartesian(xlim = c(0, 1), ylim = c(0, 1))
return(p)
}
p1 <- ROCDraw(hashTest2, ans42)
p1
?geom_line
#Teiknum ROC
ROCDraw <- function(df, modl) {
score <- predict(modl, type = "response")
y <- df$correct
#False positive rate
FPR <- 0
#true positive rate
TPR <- 0
#setjum upp threshold
threshold <- seq(from = 0, to = 1, by = 0.01)
# number of positive and negative
P <- sum(y)
N <- length(y) - P
#Iterate through all thresholds
for (j in 1:length(threshold)) {
FP <- 0
TP <- 0
thresh <- threshold[j]
for (i in 1:length(score)) {
if (score[i] >= thresh) {
if (y[i] == 1){
TP <- TP + 1
}
if (y[i] == 0){
FP <- FP + 1
}
}
}
FPR[j] <- FP/N
TPR[j] <- TP/P
}
#Reiknum AUC með trapezoid reglunni
auc <- -1 * trapz(FPR, TPR)
#Að lokum teiknum við aðeins upp
p <- data.frame(x = FPR, y = TPR) %>%
ggplot(aes(x = FPR, y = TPR)) +
geom_area(fill = "lightblue")+
geom_line(color = "orange", size = 2) +
geom_line(data = data.frame(x = seq(0, 1, 0.01), y = seq(0, 1, 0.01)), aes(x = x, y = y), linetype = "dashed") +
labs(title = paste0("ROC curve, AUC = ", round(auc, digits = 4))) +
xlab("False Positive Rate") +
ylab("True Positive Rate") +
coord_cartesian(xlim = c(0, 1), ylim = c(0, 1))
return(p)
}
p1 <- ROCDraw(hashTest2, ans42)
p1
#Teiknum ROC
ROCDraw <- function(df, modl) {
score <- predict(modl, type = "response")
y <- df$correct
#False positive rate
FPR <- 0
#true positive rate
TPR <- 0
#setjum upp threshold
threshold <- seq(from = 0, to = 1, by = 0.01)
# number of positive and negative
P <- sum(y)
N <- length(y) - P
#Iterate through all thresholds
for (j in 1:length(threshold)) {
FP <- 0
TP <- 0
thresh <- threshold[j]
for (i in 1:length(score)) {
if (score[i] >= thresh) {
if (y[i] == 1){
TP <- TP + 1
}
if (y[i] == 0){
FP <- FP + 1
}
}
}
FPR[j] <- FP/N
TPR[j] <- TP/P
}
#Reiknum AUC með trapezoid reglunni
auc <- -1 * trapz(FPR, TPR)
#Að lokum teiknum við aðeins upp
p <- data.frame(x = FPR, y = TPR) %>%
ggplot(aes(x = FPR, y = TPR)) +
geom_area(fill = "lightblue")+
geom_line(color = "orange", size = 1.5) +
geom_line(data = data.frame(x = seq(0, 1, 0.01), y = seq(0, 1, 0.01)), aes(x = x, y = y), linetype = "dashed") +
labs(title = paste0("ROC curve, AUC = ", round(auc, digits = 4))) +
xlab("False Positive Rate") +
ylab("True Positive Rate") +
coord_cartesian(xlim = c(0, 1), ylim = c(0, 1))
return(p)
}
p1 <- ROCDraw(hashTest2, ans42)
p1
p2 <- ROCDraw(hashTest2, ans22)
p2
grid.arrange(p1, p2, nrow = 1)
#Fyrst eru það þægilegu dplyr og tidyr föllin. Svo RMySQL til að fá aðgang á SQL
library(dbplyr)
library(dplyr)
library(RMySQL)
library(tidyr)
#Hvað gerir MASS aftur?
library(MASS)
#GGplot gott til að teikna
library(ggplot2)
library(gridExtra)
#Tidyverse er geðveikt
library(tidyverse)
#modelr var fyrir %$% skipanir minnist mig
library(modelr)
#hvað gerir rlang aftur?
library(rlang)
#lme4 og lmerTest er fyrir glmer og fleira þægilegt
library(lme4)
library(lmerTest)
#Car er til að geta notað Anova
library(car)
#cAIC4 er svo það sé hægt að prufa stepcAIC, svo stepAIC fyrir glmer fallið, mun líklega ekki nota, tekur of langan tíma
library(cAIC4)
#til að geta gert trapz fyrir AUC í ROC
library(pracma)
load("Data/ans22")
load("Data/ans42")
hashAnswer <- read.csv('Data/hashAnswer4.csv')
hashAnswer <- hashAnswer %>% subset(select=-c(X))
hashAnswer$hsta <- hashAnswer$hsta%>%as.character()
hashAnswer$lectureId <- hashAnswer$lectureId %>% as.factor()
hashAnswer$studentId <- hashAnswer$studentId %>% as.factor()
hashAnswer$nicc <- hashAnswer$nicc %>% as.factor()
hashAnswer$fsfat <- hashAnswer$fsfat/10
hashAnswer$fsvfatu <- hashAnswer$fsvfatu/10
hashTest2 <- hashAnswer %>% group_by(studentId) %>% mutate("count" = n()) %>%
filter(count > 7 & fsfat < 10)
summary(ans42)
install.packages("DescTools")
#Hefur aðferð til að reikna Brier score
library(DescTools)
BrierScore(ans42)
BrierScore(x = ans42)
BrierScore <- function(predicted, truth) {
return(mean((predicted-truth)^2))
}
BrierScore(predict(ans42, type = "response"), hashTest2$correct)
BrierScore(predict(ans22, type = "response"), hashTest2$correct)
BrierScore(ans42, hashTest2)
BrierScore <- function(modl, df ) {
predicted <- predict(modl, type = "response")
truth <- df$correct
return(mean((predicted-truth)^2))
}
BrierScore(ans42, hashTest2)
BrierScore(ans22, hashTest2)
?boot
install.packages("boot")
#Fyrst eru það þægilegu dplyr og tidyr föllin. Svo RMySQL til að fá aðgang á SQL
library(dbplyr)
library(dplyr)
library(RMySQL)
library(tidyr)
#Hvað gerir MASS aftur?
library(MASS)
#GGplot gott til að teikna
library(ggplot2)
library(gridExtra)
#Tidyverse er geðveikt
library(tidyverse)
#modelr var fyrir %$% skipanir minnist mig
library(modelr)
#hvað gerir rlang aftur?
library(rlang)
#lme4 og lmerTest er fyrir glmer og fleira þægilegt
library(lme4)
library(lmerTest)
#Car er til að geta notað Anova
library(car)
#cAIC4 er svo það sé hægt að prufa stepcAIC, svo stepAIC fyrir glmer fallið, mun líklega ekki nota, tekur of langan tíma
library(cAIC4)
#til að geta gert trapz fyrir AUC í ROC
library(pracma)
#Bootstrapping pakki
library(boot)
#Bootstrapping pakki
library(boot)
