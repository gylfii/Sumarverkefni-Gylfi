)
p <- ggplot(data=cbind(hashAnswery,pred=predict.glm(ans.glm,type = "response")),aes(x=fsfat,y=correct))+
geom_point(aes(color=hsta))+
geom_line(aes(y=pred, color=hsta))+
ggtitle(paste("Undir ", limit,sep = ""))+
geom_text(aes(label = label), data = dlab)
return(p)
}
p1 <- draw_range_by_fun(hashAnswer, draw_by_limit)
ggsave("Img/plot1.png", plot = p1, width = 15, height = 10)
draw_by_limit(hashAnswer, 100)
#Fall til að teikna upp logistic línu fyrir fsfat og limitað eftir fjolda svara
draw_by_limit <- function(hashA, limit) {
hashAnswery <- hashA%>% filter(fsfat<limit)
ans.glm <- glm(correct~fsfat*hsta,family = binomial(link="logit"),data=hashAnswery)
dlab <- tibble(
fsfat = -Inf,
correct = 0.4,
label = paste("fjoldi nemenda sem \nfóru lengra er",hashA%>%
filter(fsfat>limit) %>% summarise(n_distinct(studentId)), sep = " " )
)
p <- ggplot(data=cbind(hashAnswery,pred=predict.glm(ans.glm,type = "response")),aes(x=fsfat,y=correct))+
geom_point(aes(color=hsta))+
geom_line(aes(y=pred, color=hsta))+
ggtitle(paste("Undir ", limit,sep = ""))+
geom_text(aes(label = label), data = dlab, hjust = "left")
return(p)
}
draw_by_limit(hashAnswer, 100)
draw_by_limit_sv <- function(hashA, limit) {
hashAnswery <- hashA%>% filter(fsfat<limit)
ans.glm <- glm(correct~fsvfatu*hsta,family = binomial(link="logit"),data=hashAnswery)
dlab <- tibble(
fsfat = -Inf,
correct = 0.4,
label = paste("fjoldi nemenda sem \nfóru lengra er",hashA%>%
filter(fsfat>limit) %>% summarise(n_distinct(studentId)), sep = " " )
)
p <- ggplot(data=cbind(hashAnswery,pred=predict.glm(ans.glm,type = "response")),aes(x=fsvfatu,y=correct))+
geom_point(aes(color = hsta))+
geom_line(aes(y=pred, color = hsta))+
ggtitle(paste("Undir ", limit,sep = "")) +
geom_text(aes(label = label), data = dlab, hjust = "left")
return(p)
}
draw_by_limit_sv(hashAnswer, 100)
draw_by_limit_sv <- function(hashA, limit) {
hashAnswery <- hashA%>% filter(fsfat<limit)
ans.glm <- glm(correct~fsvfatu*hsta,family = binomial(link="logit"),data=hashAnswery)
dlab <- tibble(
fsvfatu = -Inf,
correct = 0.4,
label = paste("fjoldi nemenda sem \nfóru lengra er",hashA%>%
filter(fsfat>limit) %>% summarise(n_distinct(studentId)), sep = " " )
)
p <- ggplot(data=cbind(hashAnswery,pred=predict.glm(ans.glm,type = "response")),aes(x=fsvfatu,y=correct))+
geom_point(aes(color = hsta))+
geom_line(aes(y=pred, color = hsta))+
ggtitle(paste("Undir ", limit,sep = "")) +
geom_text(aes(label = label), data = dlab, hjust = "left")
return(p)
}
draw_by_limit_sv(hashAnswer, 100)
p1 <- draw_range_by_fun(hashAnswer, draw_by_limit)
p2 <- draw_range_by_fun(hashAnswer, draw_by_limit_sv)
ggsave("Img/plot1.png", plot = p1, width = 15, height = 10)
ggsave("Img/plot2.png", plot = p2, width = 15, height = 10)
install.packages("latexpdf")
knitr::opts_chunk$set(echo = TRUE)
source('Script/Settings.R')
install.packages("pdflatex")
library(latex2exp)
## Gagna Innlestur
Lesið er inn gögninn
```{r Gagnalestur, warning=FALSE}
hashAnswer <- read.csv('Data/hashAnswer4.csv')
hashAnswer <- hashAnswer %>% subset(select=-c(X))
hashAnswer$hsta <- hashAnswer$hsta%>%as.character()
hashAnswer$lectureId <- hashAnswer$lectureId %>% as.factor()
hashAnswer$studentId <- hashAnswer$studentId %>% as.factor()
```
Þetta eru tutor-web gögn fyrir lík og töl í vormisseri 2020. \\
```{r data example}
glimpse(hashAnswer)
```
Gögninn innihalda factor breyturnar lectureId, studentId og questionId. Sem eru einkenningar fyrirlesturinns, nemendans og spurningarnar. Næst inniheldur það correct sem er binary breyta fyrir því hvort fengið var rétt eða rangt svar. Hash er einkvæm tenging fyrir hvert svar. fsfat er "Fjöldi spurninga fram að þessu" sem telur upp hve margar spurningar nemandinn hefur svarað hingað til í þessum fyrirlestri. fsvfat er "Fjöldi svara fram að þessu" sem telur upp hve ný svör nemandinn hefur séð að þessum punkti. fsvfatu "Fjöldi svara fram að þessu uppfært" þetta er temporary nafn sem kemur fyrir fsvfat nema þegar AOTA+ spurning kemur þá heldur það sama fsvfat fyrir þá spurningu, telst samt venjulega annars. hsta "hef séð þetta áður" þetta er 0 eða 1 sem segir til hvort nemandinn hefur séð svarið áður eða ekki. Að lokum er timeDif sem segir til hve margar sekúndur hafa varið séðan þetta svar kom seinast. \\
\\
Fyrsta sem ég gerði var að skoða aðeins einföld logistic regression föll, skipt upp eftir því hve margar spurningar, semsagt fsfat ég leifi að svara. Þá fyrir fsfat og fyrir fsvfat.
![fsfat]Img/plot1.png)
include_graphics('Img/plot1.png')
testlist <- list()
testlist <- list()
testlist[1] <- 3
testlist[2] <- c(1,3)
testlist[2]
testslist[3] <- data.frame(x = 1:50, y = 51:100)
testlist[3] <- data.frame(x = 1:50, y = 51:100)
testlist[3] <- list(data.frame(x = 1:50, y = 51:100))
hasht <- data.frame(hashA, term = 50)
draw_at_once <- function(hashA) {
mylist <- list()
hasht <- data.frame(hashA, term = 50)
for (i in 1:6) {
mylist[i] <- list(make_limit_frame(hashA, 50*i))
}
p <- hashA %>% filter(hsta == 0) %>%
ggplot(aes(x = fsfat, y = correct))
}
hasht <- data.frame(hashAnswer, term = 50)
draw_at_once <- function(hashA) {
mylist <- list()
hasht <- data.frame(hashA, term = 400)
for (i in 1:6) {
hasht <- make_limit_frame(hashA, 50*i) %>% rbind(hasht)
}
p <- hasht %>% filter(hsta == 0) %>%
ggplot(aes(x = fsfat, y = correct)) +
geom_point() +
geom_line(aes(y = pred, color = term))
}
library(dbplyr)
library(dplyr)
library(RMySQL)
library(tidyr)
library(MASS)
library(ggplot2)
library(gridExtra)
library(tidyverse)
library(modelr)
library(rlang)
#lesum inn gögninn okkar
hashAnswer <- read.csv('Data/hashAnswer4.csv')
hashAnswer <- hashAnswer %>% subset(select=-c(X))
hashAnswer$hsta <- hashAnswer$hsta%>%as.character()
hashAnswer$lectureId <- hashAnswer$lectureId %>% as.factor()
hashAnswer$studentId <- hashAnswer$studentId %>% as.factor()
make_limit_frame <- function(hashA, limit) {
hashlim <- hashA %>% filter(fsfat < limit)
ans <- glm(correct ~ fsfat * hsta, family = binomial(link = "logit"), data = hashlim)
hashlim <- hashlim %>% mutate(pred = predict.glm(ans, type = "response")) %>% filter(hsta == 0) %>% data.frame(term = limit)
return(hashlim)
}
draw_at_once <- function(hashA) {
mylist <- list()
hasht <- data.frame(hashA, term = 400)
for (i in 1:6) {
hasht <- make_limit_frame(hashA, 50*i) %>% rbind(hasht)
}
p <- hasht %>% filter(hsta == 0) %>%
ggplot(aes(x = fsfat, y = correct)) +
geom_point() +
geom_line(aes(y = pred, color = term))
}
draw_at_once(hashAnswer)
draw_at_once <- function(hashA) {
mylist <- list()
hasht <- make_limit_frame(hashA, 400)
for (i in 1:6) {
hasht <- make_limit_frame(hashA, 50*i) %>% rbind(hasht)
}
p <- hasht %>% filter(hsta == 0) %>%
ggplot(aes(x = fsfat, y = correct)) +
geom_point() +
geom_line(aes(y = pred, color = term))
}
draw_at_once(hashAnswer)
draw_at_once <- function(hashA) {
mylist <- list()
hasht <- make_limit_frame(hashA, 400)
for (i in 1:6) {
hasht <- make_limit_frame(hashA, 50*i) %>% rbind(hasht)
}
p <- hasht %>% filter(hsta == 0) %>%
ggplot(aes(x = fsfat, y = correct)) +
geom_point() +
geom_line(aes(y = pred, color = term))
return(p)
}
draw_at_once(hashAnswer)
draw_at_once <- function(hashA) {
mylist <- list()
hasht <- make_limit_frame(hashA, 400)
for (i in 1:6) {
hasht <- make_limit_frame(hashA, 50*i) %>% rbind(hasht)
}
hasht <- as.factor(hasht$term)
p <- hasht %>% filter(hsta == 0) %>%
ggplot(aes(x = fsfat, y = correct)) +
geom_point() +
geom_line(aes(y = pred, color = term))
return(p)
}
draw_at_once(hashAnswer)
draw_at_once <- function(hashA) {
mylist <- list()
hasht <- make_limit_frame(hashA, 400)
for (i in 1:6) {
hasht <- make_limit_frame(hashA, 50*i) %>% rbind(hasht)
}
hasht <- as.factor(hasht$term)
print(hasht$term)
# p <- hasht %>% filter(hsta == 0) %>%
#   ggplot(aes(x = fsfat, y = correct)) +
#   geom_point() +
#   geom_line(aes(y = pred, color = term))
# return(p)
}
draw_at_once(hashAnswer)
draw_at_once <- function(hashA) {
mylist <- list()
hasht <- make_limit_frame(hashA, 400)
for (i in 1:6) {
hasht <- make_limit_frame(hashA, 50*i) %>% rbind(hasht) %>% as.data.frame()
}
hasht <- as.factor(hasht$term)
print(hasht$term)
# p <- hasht %>% filter(hsta == 0) %>%
#   ggplot(aes(x = fsfat, y = correct)) +
#   geom_point() +
#   geom_line(aes(y = pred, color = term))
# return(p)
}
draw_at_once(hashAnswer)
draw_at_once <- function(hashA) {
mylist <- list()
hasht <- make_limit_frame(hashA, 400)
for (i in 1:6) {
hasht <- make_limit_frame(hashA, 50*i) %>% rbind(hasht)
}
hasht <- as.factor(hasht$term)
return(hasht)
print(hasht$term)
# p <- hasht %>% filter(hsta == 0) %>%
#   ggplot(aes(x = fsfat, y = correct)) +
#   geom_point() +
#   geom_line(aes(y = pred, color = term))
# return(p)
}
draw_at_once(hashAnswer)
knowledge <- draw_at_once(hashAnswer)
knowledge <- draw_at_once(hashAnswer) %>% as.data.frame()
View(knowledge)
draw_at_once <- function(hashA) {
mylist <- list()
hasht <- make_limit_frame(hashA, 400)
for (i in 1:6) {
hasht <- make_limit_frame(hashA, 50*i) %>% add_row(hasht)
}
hasht <- as.factor(hasht$term)
return(hasht)
print(hasht$term)
# p <- hasht %>% filter(hsta == 0) %>%
#   ggplot(aes(x = fsfat, y = correct)) +
#   geom_point() +
#   geom_line(aes(y = pred, color = term))
# return(p)
}
knowledge <- draw_at_once(hashAnswer)
draw_at_once <- function(hashA) {
mylist <- list()
hasht <- make_limit_frame(hashA, 400)
for (i in 1:6) {
hasht <- make_limit_frame(hashA, 50*i) %>% add_row(hasht)
}
hasht$term <- as.factor(hasht$term)
return(hasht)
print(hasht$term)
# p <- hasht %>% filter(hsta == 0) %>%
#   ggplot(aes(x = fsfat, y = correct)) +
#   geom_point() +
#   geom_line(aes(y = pred, color = term))
# return(p)
}
knowledge <- draw_at_once(hashAnswer)
draw_at_once <- function(hashA) {
mylist <- list()
hasht <- make_limit_frame(hashA, 400)
for (i in 1:6) {
hasht <- make_limit_frame(hashA, 50*i) %>% add_row(hasht)
}
hasht$term <- as.factor(hasht$term)
p <- hasht %>% filter(hsta == 0) %>%
ggplot(aes(x = fsfat, y = correct)) +
geom_point() +
geom_line(aes(y = pred, color = term))
return(p)
}
draw_at_once(hashAnswer)
p <- draw_at_once(hashAnswer)
ggsave("Img/plot3.png", plot = p)
p5 <- hashAnswer %>% group_by(fsfat,hsta) %>% filter(fsfat>=0) %>%
summarise("med"=mean(correct),"fjold"=n_distinct(studentId)) %>%
ggplot(aes(x=fsfat,y=med,color=hsta), show.legend=FALSE)+
geom_point(show.legend = FALSE)+
geom_smooth(show.legend = FALSE)
p6 <- hashAnswer %>% group_by(fsfat,hsta) %>% filter(fsfat>=0) %>%
summarise("fjoldi"=n_distinct(studentId)) %>%
ggplot(aes(x=fsfat,y=fjoldi,color=hsta))+
geom_line(show.legend = FALSE)
p7 <- hashAnswer %>% group_by(fsvfatu,hsta) %>%
summarise("med"=mean(correct),"fjold"=n_distinct(studentId)) %>%
ggplot(aes(x=fsvfatu,y=med,color=hsta), show.legend=FALSE)+
geom_point(show.legend = FALSE)+
geom_smooth(show.legend = FALSE)
p8 <- hashAnswer %>% group_by(fsvfatu,hsta) %>%
summarise("fjoldi"=n_distinct(studentId)) %>%
ggplot(aes(x=fsvfatu,y=fjoldi,color=hsta))+
geom_line(show.legend = FALSE)
ps <- grid.arrange(p5, p6, p7, p8, nrow = 2)
ggsave('Img/plotbymean.png', ps)
ggsave('Img/plotbymean.png', ps, width = 10, height = 10)
?grid.arrange
mean_plot_by_limit <- function(hashA, limit) {
hashl <- hashA %>% filter(fsfat < limit)
p5 <- hashl %>% group_by(fsfat,hsta) %>%
summarise("med"=mean(correct),"fjold"=n_distinct(studentId)) %>%
ggplot(aes(x=fsfat,y=med,color=hsta), show.legend=FALSE)+
geom_point(show.legend = FALSE)+
geom_smooth(show.legend = FALSE)
p6 <- hashl %>% group_by(fsfat,hsta) %>%
summarise("fjoldi"=n_distinct(studentId)) %>%
ggplot(aes(x=fsfat,y=fjoldi,color=hsta))+
geom_line(show.legend = FALSE)
p7 <- hashl %>% group_by(fsvfatu,hsta) %>%
summarise("med"=mean(correct),"fjold"=n_distinct(studentId)) %>%
ggplot(aes(x=fsvfatu,y=med,color=hsta), show.legend=FALSE)+
geom_point(show.legend = FALSE)+
geom_smooth(show.legend = FALSE)
p8 <- hashl %>% group_by(fsvfatu,hsta) %>%
summarise("fjoldi"=n_distinct(studentId)) %>%
ggplot(aes(x=fsvfatu,y=fjoldi,color=hsta))+
geom_line(show.legend = FALSE)
grid.arrange(p5, p6, p7, p8, nrow = 2) %>% return()
}
mean_plot_by_limit <- function(hashA, limit) {
hashl <- hashA %>% filter(fsfat < limit)
p5 <- hashl %>% group_by(fsfat,hsta) %>%
summarise("med"=mean(correct),"fjold"=n_distinct(studentId)) %>%
ggplot(aes(x=fsfat,y=med,color=hsta), show.legend=FALSE)+
geom_point(show.legend = FALSE)+
geom_smooth(show.legend = FALSE)
p6 <- hashl %>% group_by(fsfat,hsta) %>%
summarise("fjoldi"=n_distinct(studentId)) %>%
ggplot(aes(x=fsfat,y=fjoldi,color=hsta))+
geom_line(show.legend = FALSE)
p7 <- hashl %>% group_by(fsvfatu,hsta) %>%
summarise("med"=mean(correct),"fjold"=n_distinct(studentId)) %>%
ggplot(aes(x=fsvfatu,y=med,color=hsta), show.legend=FALSE)+
geom_point(show.legend = FALSE)+
geom_smooth(show.legend = FALSE)
p8 <- hashl %>% group_by(fsvfatu,hsta) %>%
summarise("fjoldi"=n_distinct(studentId)) %>%
ggplot(aes(x=fsvfatu,y=fjoldi,color=hsta))+
geom_line(show.legend = FALSE)
grid.arrange(p5, p6, p7, p8, nrow = 2, top = "example") %>% return()
}
mean_plot_by_limit(hashAnswer, 100)
for (i in 1:6) {
tpath <- paste0('Img/plotbymean', i*50, '.png')
ps <- mean_plot_by_limit(hashAnswer, i*50)
ggsave(tpath, ps, width = 10, height = 10)
}
mean_plot_by_limit <- function(hashA, limit) {
hashl <- hashA %>% filter(fsfat < limit)
p5 <- hashl %>% group_by(fsfat,hsta) %>%
summarise("med"=mean(correct),"fjold"=n_distinct(studentId)) %>%
ggplot(aes(x=fsfat,y=med,color=hsta), show.legend=FALSE)+
geom_point(show.legend = FALSE)+
geom_smooth(show.legend = FALSE)
p6 <- hashl %>% group_by(fsfat,hsta) %>%
summarise("fjoldi"=n_distinct(studentId)) %>%
ggplot(aes(x=fsfat,y=fjoldi,color=hsta))+
geom_line(show.legend = FALSE)
p7 <- hashl %>% group_by(fsvfatu,hsta) %>%
summarise("med"=mean(correct),"fjold"=n_distinct(studentId)) %>%
ggplot(aes(x=fsvfatu,y=med,color=hsta), show.legend=FALSE)+
geom_point(show.legend = FALSE)+
geom_smooth(show.legend = FALSE)
p8 <- hashl %>% group_by(fsvfatu,hsta) %>%
summarise("fjoldi"=n_distinct(studentId)) %>%
ggplot(aes(x=fsvfatu,y=fjoldi,color=hsta))+
geom_line(show.legend = FALSE)
grid.arrange(p5, p6, p7, p8, nrow = 2, top = paste0("undir ", limit)) %>% return()
}
for (i in 1:6) {
tpath <- paste0('Img/plotbymean', i*50, '.png')
ps <- mean_plot_by_limit(hashAnswer, i*50)
ggsave(tpath, ps, width = 10, height = 10)
}
ans4 <- glm(correct ~ fsvfat*hsta*lectureId, family = binomial(link = "logit"), data = hashAnswer)
p4fsv <- hashAnswer %>% mutate(pred = predict.glm(ans4, type = "response")) %>%
filter(hsta == 0) %>%
ggplot(aes(x = fsvfat, y = correct, color = lectureId)) +
geom_point() +
geom_line(aes(y = pred))
ans4f <- glm(correct ~ fsfat*hsta*lectureId, family = binomial(link = "logit"), data = hashAnswer)
p4fsf <- hashAnswer %>% mutate(pred = predict.glm(ans4f, type = "response")) %>%
filter(hsta == 0) %>%
ggplot(aes(x = fsfat, y = correct, color = lectureId)) +
geom_point() +
geom_line(aes(y = pred))
ps <- grid.arrange(p4fsv, p4fsf, nrow = 1)
ggsave('Img/plotbylectureId', ps, width = 10, height = 10)
ggsave('Img/plotbylectureId.png', ps, width = 15, height = 7,5)
ggsave('Img/plotbylectureId.png', ps, width = 15, height = 7.5)
#Býr til fall sem hægt er að teikna sitthvort fall fyrir hvert lectureId
Drawable_by_Id <- function(df, Id, fun) {
by_Id <- df %>% group_by(!!sym(Id)) %>%
nest() %>%
filter(map_dbl(data, nrow) > 10)
by_Id <- by_Id %>%
mutate(model = map(data, fun))
by_Id <- by_Id %>%
mutate(pred = map(model, predict.glm, type = "response"))
Id_unested <- by_Id %>%
unnest(data, pred)
return(Id_unested)
}
student_unested1 <- Drawable_by_Id(hashAnswer, "studentId", fsfat_model)
fsvfat_model <- function(df) {
glm(correct ~ fsvfat * hsta, family = binomial(link = "logit"), data = df)
}
fsfat_model <- function(df) {
glm(correct ~ fsfat * hsta, family = binomial(link = "logit"), data = df)
}
#Býr til fall sem hægt er að teikna sitthvort fall fyrir hvert lectureId
Drawable_by_Id <- function(df, Id, fun) {
by_Id <- df %>% group_by(!!sym(Id)) %>%
nest() %>%
filter(map_dbl(data, nrow) > 10)
by_Id <- by_Id %>%
mutate(model = map(data, fun))
by_Id <- by_Id %>%
mutate(pred = map(model, predict.glm, type = "response"))
Id_unested <- by_Id %>%
unnest(data, pred)
return(Id_unested)
}
student_unested1 <- Drawable_by_Id(hashAnswer, "studentId", fsfat_model)
student_unested <- Drawable_by_Id(hashAnswer, "studentId", fsvfat_model)
p1 <- student_unested %>%
ggplot(aes(x = fsvfat, y = correct)) +
geom_point() +
geom_line(aes(y = pred, group = studentId))
p2 <- student_unested1 %>%
ggplot(aes(x = fsfat, y = correct)) +
geom_point() +
geom_line(aes(y = pred, group = studentId))
ps <- grid.arrange(p2, p1, nrow = 1)
ggsave('Img/plotbystudentId', ps, width = 20, height = 10)
ggsave('Img/plotbystudentId.png', ps, width = 20, height = 10)
hashAnswer %>% group_by(lectureId) %>% summarise(n_distinct(studentId))
p1 <- student_unested %>% filter(lectureId = 3082) %>%
ggplot(aes(x = fsvfat, y = correct)) +
geom_point() +
geom_line(aes(y = pred, group = studentId))
p2 <- student_unested1 %>% filter(lectureId = 3082)
p1 <- student_unested %>% filter(lectureId == 3082) %>%
ggplot(aes(x = fsvfat, y = correct)) +
geom_point() +
geom_line(aes(y = pred, group = studentId))
p2 <- student_unested1 %>% filter(lectureId == 3082)
ps <- grid.arrange(p2, p1, nrow = 1)
ggsave('Img/plotbystudentId.png', ps, width = 20, height = 10)
p2 <- student_unested1 %>% filter(lectureId == 3082) %>%
ggplot(aes(x = fsfat, y = correct)) +
geom_point() +
geom_line(aes(y = pred, group = studentId))
ps <- grid.arrange(p2, p1, nrow = 1)
ggsave('Img/plotbystudentId.png', ps, width = 20, height = 10)
p1 <- student_unested %>% filter(lectureId == 3082) %>%
ggplot(aes(x = fsvfat, y = correct)) +
geom_point() +
geom_line(aes(y = pred, group = studentId))
p1
p1 <- student_unested %>% filter(lectureId == 3082 & hsta == 0) %>%
ggplot(aes(x = fsvfat, y = correct)) +
geom_point() +
geom_line(aes(y = pred, group = studentId))
p1
p1 <- student_unested %>% filter(lectureId == 3082 & hsta == 0) %>%
ggplot(aes(x = fsvfat, y = correct)) +
geom_point() +
geom_line(aes(y = pred, group = studentId))
p2 <- student_unested1 %>% filter(lectureId == 3082 & hsta == 0) %>%
ggplot(aes(x = fsfat, y = correct)) +
geom_point() +
geom_line(aes(y = pred, group = studentId))
ps <- grid.arrange(p2, p1, nrow = 1)
ggsave('Img/plotbystudentId.png', ps, width = 20, height = 10)
library(Matrix)
library(dbplyr)
library(dplyr)
library(RMySQL)
Sys.setlocale("LC_ALL", "is_IS.UTF-8")
library(RMySQL)
library(MASS)
twDb<-src_mysql("tw_quizdb", host = "127.0.0.1", port = 3306, user = "gss24", password = "JuwofKWT2Ewc")
question <- tbl(twDb,"question")
answer<-tbl(twDb,"answer")
tAnswer <- as.data.frame(answer)
tQuestion <- as.data.frame(question)
questionCount <- tAnswer %>% group_by(questionId) %>% summarise("timesAnswered" =  n())
isit <- inner_join(tQuestion, questionCount)
questionCount <- tAnswer %>% group_by(questionId) %>% summarise("timescount" =  n())
isit <- inner_join(tQuestion, questionCount)
isit %>% filter(timescount != timesAnswered) %>% View()
isit %>% filter(timescount != timesAnswered) %>% summarise(n())
twDb<-src_mysql("tw_quizdb", host = "127.0.0.1", port = 3306, user = "gss24", password = "JuwofKWT2Ewc")
question <- tbl(twDb,"question")
glimpse(question)
student<-tbl(twDb,"student")
