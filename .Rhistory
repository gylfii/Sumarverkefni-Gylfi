geom_smooth() +
geom_smooth(data = dfmean4 %>% filter(fjoldi > 1), aes(color = hluta2), se = F) +
coord_cartesian(ylim = c(yminim2, ymaxim2))
p4
ggsave('Img/meabwhsbyhlutfall100.png', p4, width = 10, height = 10)
#Fyrst eru það þægilegu dplyr og tidyr föllin. Svo RMySQL til að fá aðgang á SQL
library(dbplyr)
library(dplyr)
library(RMySQL)
library(tidyr)
#Hvað gerir MASS aftur?
library(MASS)
#GGplot gott til að teikna
library(ggplot2)
library(gridExtra)
#Tidyverse er geðveikt
library(tidyverse)
#modelr var fyrir %$% skipanir minnist mig
library(modelr)
#hvað gerir rlang aftur?
library(rlang)
#lme4 og lmerTest er fyrir glmer og fleira þægilegt
library(lme4)
library(lmerTest)
#Car er til að geta notað Anova
library(car)
#cAIC4 er svo það sé hægt að prufa stepcAIC, svo stepAIC fyrir glmer fallið, mun líklega ekki nota, tekur of langan tíma
library(cAIC4)
#til að geta gert trapz fyrir AUC í ROC
library(pracma)
#Bootstrapping pakki
library(boot)
#Fyrir AUC reikninga
library(cvAUC)
#Annaðhvort þeirra gefur mem_used() til að skoða hve mikið af mininnu er notað
library(pryr)
hashAnswer <- read.csv('Data/hashAnswer4.csv')
hashAnswer <- hashAnswer %>% subset(select=-c(X))
hashAnswer$hsta <- hashAnswer$hsta%>%as.character()
hashAnswer$lectureId <- hashAnswer$lectureId %>% as.factor()
hashAnswer$studentId <- hashAnswer$studentId %>% as.factor()
hashAnswer$nicc <- hashAnswer$nicc %>% as.factor()
hashAnswer$fsfat <- hashAnswer$fsfat/10
hashAnswer$fsvfatu <- hashAnswer$fsvfatu/10
hashAnswer$hluta2 <- cut_interval(hashAnswer$hluta, n = 5)
hashTest2 <- hashAnswer %>% group_by(studentId) %>% mutate("count" = n()) %>%
filter(count > 7 & fsfat < 10)
#þetta er fall sem er að búa til nýtt bootstrapped gagnasafn til að geta keyrt restina í
bootcreate <- function(df) {
#Búið til nested gagnasafn til að geta tekið fyrir hvern nemenda
dfnest <- df %>% group_by(lectureId, studentId) %>% nest()
bootmade <- NULL
#Lykkja til að setja saman gagnasafnið, ýtrar fyrir hvern fyrirlestur og finnur jafnmarga nemendur aftur
for (id in unique(dfnest$lectureId)) {
dftemp <- dfnest %>% filter(lectureId == id)
ni <- dftemp$studentId %>% n_distinct()
takenNr <- sample(1:ni, replace = TRUE)
notnest <- dftemp[takenNr, ] %>% unnest(cols = c(data))
bootmade <- rbind(bootmade, notnest)
}
return(bootmade)
}
#smá fall til að reikna BrierScoreið
BrierScore <- function(modl, df ) {
predicted <- predict(modl, type = "response")
truth <- df$correct
return(mean((predicted-truth)^2))
}
SBrierScore <- function(modl, df) {
predicted <- predict(modl, type = "response")
truth <- df$correct
Bs <- mean((predicted-truth)^2)
Bmax <- mean(predict(modl, type = "response")) * (1-mean(predict(modl, type = "response")))
return(1 - Bs/Bmax)
}
#Bootwork er svo aðal Bootstrap fallið
# Þarf að manually setja inn glmer fallið sem maður þarf þar inni
Bootwork <- function(df, iteration){
options(contrasts = c("contr.sum", "contr.poly"))
#Byrjum fyrst að keyra það fyrir upprunalega gagnasafnið
ormodel <- glmer(correct ~ fsfat*hsta + nicc + gpow + lectureId + (1 | studentId), family = binomial(link = "logit"),
data = df, nAGQ = 0, control=glmerControl(optimizer="bobyqa",optCtrl=list(maxfun=2e5)))
original <- data.frame(brier = BrierScore(ormodel, df),
StanBrier = SBrierScore(ormodel, df),
AUC = AUC(predict(ormodel, type = "response"), df$correct))
#Bý til nýjann grunn til að safna saman efnið frá bootstrappinu
bootel <- data.frame(brier = numeric(0), StanBrier - numeric(0), AUC = numeric(0))
print('It begun')
for (i in 1:iteration){
#Bý til nýtt safn með bootstrap
Bdf <- bootcreate(df)
#Bý til model fyrir þetta bootstrap
#Bmodel <- Funmod(Bdf)
Bmodel <- glmer(correct ~ fsfat*hsta + nicc + gpow + lectureId + (1 | studentId), family = binomial(link = "logit"),
data = Bdf, nAGQ = 0, control=glmerControl(optimizer="bobyqa",optCtrl=list(maxfun=2e5)))
#Reiknað breyturnar sem það þarf að reikna
Nadditions <- data.frame(brier = BrierScore(Bmodel, Bdf),
StanBrier = SBrierScore(Bmodel, Bdf),
AUC = AUC(predict(Bmodel, type = "response"), Bdf$correct))
#Geyma efnið í gagnasafninu
bootel <- rbind(bootel, Nadditions)
# rm(Bmodel)
}
#skila original og bootel
return(list(original, bootel))
}
#Bootwork er svo aðal Bootstrap fallið
# Þarf að manually setja inn glmer fallið sem maður þarf þar inni
Bootwork <- function(df, iteration){
options(contrasts = c("contr.sum", "contr.poly"))
#Byrjum fyrst að keyra það fyrir upprunalega gagnasafnið
ormodel <- glmer(correct ~ fsfat*hsta + nicc + gpow + lectureId + (1 | studentId), family = binomial(link = "logit"),
data = df, nAGQ = 0, control=glmerControl(optimizer="bobyqa",optCtrl=list(maxfun=2e5)))
original <- data.frame(brier = BrierScore(ormodel, df),
StanBrier = SBrierScore(ormodel, df),
AUC = AUC(predict(ormodel, type = "response"), df$correct))
#Bý til nýjann grunn til að safna saman efnið frá bootstrappinu
bootel <- data.frame(brier = numeric(0), StanBrier - numeric(0), AUC = numeric(0))
print('It begun')
for (i in 1:iteration){
#Bý til nýtt safn með bootstrap
print(paste0(round(i/iteration * 100, digits = 1), "%"))
Bdf <- bootcreate(df)
#Bý til model fyrir þetta bootstrap
#Bmodel <- Funmod(Bdf)
Bmodel <- glmer(correct ~ fsfat*hsta + nicc + gpow + lectureId + (1 | studentId), family = binomial(link = "logit"),
data = Bdf, nAGQ = 0, control=glmerControl(optimizer="bobyqa",optCtrl=list(maxfun=2e5)))
#Reiknað breyturnar sem það þarf að reikna
Nadditions <- data.frame(brier = BrierScore(Bmodel, Bdf),
StanBrier = SBrierScore(Bmodel, Bdf),
AUC = AUC(predict(Bmodel, type = "response"), Bdf$correct))
#Geyma efnið í gagnasafninu
bootel <- rbind(bootel, Nadditions)
# rm(Bmodel)
}
#skila original og bootel
return(list(original, bootel))
}
set.seed(117)
bootedfit1 <- Bootwork(hashTest2, 2500)
save(bootedfit1, file = "Data/Bootedfit1")
#Bootwork er svo aðal Bootstrap fallið
# Þarf að manually setja inn glmer fallið sem maður þarf þar inni
Bootwork <- function(df, iteration){
options(contrasts = c("contr.sum", "contr.poly"))
#Byrjum fyrst að keyra það fyrir upprunalega gagnasafnið
ormodel <- glmer(correct ~ fsfat*hsta + nicc + gpow + lectureId + (1 | studentId), family = binomial(link = "logit"),
data = df, nAGQ = 0, control=glmerControl(optimizer="bobyqa",optCtrl=list(maxfun=2e5)))
original <- data.frame(brier = BrierScore(ormodel, df),
StanBrier = SBrierScore(ormodel, df),
AUC = AUC(predict(ormodel, type = "response"), df$correct))
#Bý til nýjann grunn til að safna saman efnið frá bootstrappinu
bootel <- data.frame(brier = numeric(0), StanBrier = numeric(0), AUC = numeric(0))
print('It begun')
for (i in 1:iteration){
#Bý til nýtt safn með bootstrap
print(paste0(round(i/iteration * 100, digits = 1), "%"))
Bdf <- bootcreate(df)
#Bý til model fyrir þetta bootstrap
#Bmodel <- Funmod(Bdf)
Bmodel <- glmer(correct ~ fsfat*hsta + nicc + gpow + lectureId + (1 | studentId), family = binomial(link = "logit"),
data = Bdf, nAGQ = 0, control=glmerControl(optimizer="bobyqa",optCtrl=list(maxfun=2e5)))
#Reiknað breyturnar sem það þarf að reikna
Nadditions <- data.frame(brier = BrierScore(Bmodel, Bdf),
StanBrier = SBrierScore(Bmodel, Bdf),
AUC = AUC(predict(Bmodel, type = "response"), Bdf$correct))
#Geyma efnið í gagnasafninu
bootel <- rbind(bootel, Nadditions)
# rm(Bmodel)
}
#skila original og bootel
return(list(original, bootel))
}
set.seed(117)
bootedfit1 <- Bootwork(hashTest2, 2500)
save(bootedfit1, file = "Data/Bootedfit1")
save(bootedfit1, file = "Data/Bootedfit1")
#Fyrst eru það þægilegu dplyr og tidyr föllin. Svo RMySQL til að fá aðgang á SQL
library(dbplyr)
library(dplyr)
library(RMySQL)
library(tidyr)
#Hvað gerir MASS aftur?
library(MASS)
#GGplot gott til að teikna
library(ggplot2)
library(gridExtra)
#Tidyverse er geðveikt
library(tidyverse)
#modelr var fyrir %$% skipanir minnist mig
library(modelr)
#hvað gerir rlang aftur?
library(rlang)
#lme4 og lmerTest er fyrir glmer og fleira þægilegt
library(lme4)
library(lmerTest)
#Car er til að geta notað Anova
library(car)
#cAIC4 er svo það sé hægt að prufa stepcAIC, svo stepAIC fyrir glmer fallið, mun líklega ekki nota, tekur of langan tíma
library(cAIC4)
#til að geta gert trapz fyrir AUC í ROC
library(pracma)
#Bootstrapping pakki
library(boot)
#Fyrir AUC reikninga
library(cvAUC)
#Annaðhvort þeirra gefur mem_used() til að skoða hve mikið af mininnu er notað
library(pryr)
hashAnswer <- read.csv('Data/hashAnswer4.csv')
hashAnswer <- hashAnswer %>% subset(select=-c(X))
hashAnswer$hsta <- hashAnswer$hsta%>%as.character()
hashAnswer$lectureId <- hashAnswer$lectureId %>% as.factor()
hashAnswer$studentId <- hashAnswer$studentId %>% as.factor()
hashAnswer$nicc <- hashAnswer$nicc %>% as.factor()
hashAnswer$fsfat <- hashAnswer$fsfat/10
hashAnswer$fsvfatu <- hashAnswer$fsvfatu/10
hashAnswer$hluta2 <- cut_interval(hashAnswer$hluta, n = 5)
hashTest2 <- hashAnswer %>% group_by(studentId) %>% mutate("count" = n()) %>%
filter(count > 7 & fsfat < 10)
#þetta er fall sem er að búa til nýtt bootstrapped gagnasafn til að geta keyrt restina í
bootcreate <- function(df) {
#Búið til nested gagnasafn til að geta tekið fyrir hvern nemenda
dfnest <- df %>% group_by(lectureId, studentId) %>% nest()
bootmade <- NULL
#Lykkja til að setja saman gagnasafnið, ýtrar fyrir hvern fyrirlestur og finnur jafnmarga nemendur aftur
for (id in unique(dfnest$lectureId)) {
dftemp <- dfnest %>% filter(lectureId == id)
ni <- dftemp$studentId %>% n_distinct()
takenNr <- sample(1:ni, replace = TRUE)
notnest <- dftemp[takenNr, ] %>% unnest(cols = c(data))
bootmade <- rbind(bootmade, notnest)
}
return(bootmade)
}
#smá fall til að reikna BrierScoreið
BrierScore <- function(modl, df ) {
predicted <- predict(modl, type = "response", newdata = df, allow.new.levels = T)
truth <- df$correct
return(mean((predicted-truth)^2))
}
SBrierScore <- function(modl, df) {
predicted <- predict(modl, type = "response", newdata = df, allow.new.levels = T)
truth <- df$correct
Bs <- mean((predicted-truth)^2)
Bmax <- mean(predicted) * (1-mean(predicted))
return(1 - Bs/Bmax)
}
#Bootwork er svo aðal Bootstrap fallið
# Þarf að manually setja inn glmer fallið sem maður þarf þar inni
Bootwork <- function(df, iteration){
options(contrasts = c("contr.sum", "contr.poly"))
#Byrjum fyrst að keyra það fyrir upprunalega gagnasafnið
ormodel <- glmer(correct ~ fsfat*hsta + nicc + gpow + lectureId + (1 | studentId), family = binomial(link = "logit"),
data = df, nAGQ = 0, control=glmerControl(optimizer="bobyqa",optCtrl=list(maxfun=2e5)))
original <- data.frame(brier = BrierScore(ormodel, df),
StanBrier = SBrierScore(ormodel, df),
AUC = AUC(predict(ormodel, type = "response"), df$correct))
#Bý til nýjann grunn til að safna saman efnið frá bootstrappinu
bootel <- data.frame(brier = numeric(0), StanBrier = numeric(0), AUC = numeric(0))
bootel.or <- data.frame(brier = numeric(0), StanBrier = numeric(0), AUC = numeric(0))
print('It begun')
for (i in 1:iteration){
#Bý til nýtt safn með bootstrap
print(paste0(round(i/iteration * 100, digits = 1), "%"))
Bdf <- bootcreate(df)
#Bý til model fyrir þetta bootstrap
#Bmodel <- Funmod(Bdf)
Bmodel <- glmer(correct ~ fsfat*hsta + nicc + gpow + lectureId + (1 | studentId), family = binomial(link = "logit"),
data = Bdf, nAGQ = 0, control=glmerControl(optimizer="bobyqa",optCtrl=list(maxfun=2e5)))
#Reiknað breyturnar sem það þarf að reikna
Nadditions <- data.frame(brier = BrierScore(Bmodel, Bdf),
StanBrier = SBrierScore(Bmodel, Bdf),
AUC = AUC(predict(Bmodel, type = "response"), Bdf$correct))
#Reiknað C.or eða original additions
Nadditions.or <- data.frame(brier = BrierScore(Bmodel, df),
StanBrier = SBrierScore(Bmodel, df),
AUC = AUC(predict(Bmodel, type = "response", newdata = df, allow.new.levels = T), df$correct))
#Geyma efnið í gagnasafninu
bootel <- rbind(bootel, Nadditions)
bootel.or <- rbind(bootel.or, Nadditions.or)
# rm(Bmodel)
}
#skila original og bootel
return(list(original, bootel, bootel.or))
}
set.seed(117)
bootedfit1 <- Bootwork(hashTest2, 2500)
save(bootedfit1, file = "Data/Bootedfit1")
#Fyrst eru það þægilegu dplyr og tidyr föllin. Svo RMySQL til að fá aðgang á SQL
library(dbplyr)
library(dplyr)
library(RMySQL)
library(tidyr)
#Hvað gerir MASS aftur?
library(MASS)
#GGplot gott til að teikna
library(ggplot2)
library(gridExtra)
#Tidyverse er geðveikt
library(tidyverse)
#modelr var fyrir %$% skipanir minnist mig
library(modelr)
#hvað gerir rlang aftur?
library(rlang)
#lme4 og lmerTest er fyrir glmer og fleira þægilegt
library(lme4)
library(lmerTest)
#Car er til að geta notað Anova
library(car)
#cAIC4 er svo það sé hægt að prufa stepcAIC, svo stepAIC fyrir glmer fallið, mun líklega ekki nota, tekur of langan tíma
library(cAIC4)
#til að geta gert trapz fyrir AUC í ROC
library(pracma)
#Bootstrapping pakki
library(boot)
#Fyrir AUC reikninga
library(cvAUC)
#Annaðhvort þeirra gefur mem_used() til að skoða hve mikið af mininnu er notað
library(pryr)
hashAnswer <- read.csv('Data/hashAnswer4.csv')
hashAnswer <- hashAnswer %>% subset(select=-c(X))
hashAnswer$hsta <- hashAnswer$hsta%>%as.character()
hashAnswer$lectureId <- hashAnswer$lectureId %>% as.factor()
hashAnswer$studentId <- hashAnswer$studentId %>% as.factor()
hashAnswer$nicc <- hashAnswer$nicc %>% as.factor()
hashAnswer$fsfat <- hashAnswer$fsfat/10
hashAnswer$fsvfatu <- hashAnswer$fsvfatu/10
hashAnswer$hluta2 <- cut_interval(hashAnswer$hluta, n = 5)
hashTest2 <- hashAnswer %>% group_by(studentId) %>% mutate("count" = n()) %>%
filter(count > 7 & fsfat < 10)
#þetta er fall sem er að búa til nýtt bootstrapped gagnasafn til að geta keyrt restina í
bootcreate <- function(df) {
#Búið til nested gagnasafn til að geta tekið fyrir hvern nemenda
dfnest <- df %>% group_by(lectureId, studentId) %>% nest()
bootmade <- NULL
#Lykkja til að setja saman gagnasafnið, ýtrar fyrir hvern fyrirlestur og finnur jafnmarga nemendur aftur
for (id in unique(dfnest$lectureId)) {
dftemp <- dfnest %>% filter(lectureId == id)
ni <- dftemp$studentId %>% n_distinct()
takenNr <- sample(1:ni, replace = TRUE)
notnest <- dftemp[takenNr, ] %>% unnest(cols = c(data))
bootmade <- rbind(bootmade, notnest)
}
return(bootmade)
}
#smá fall til að reikna BrierScoreið
BrierScore <- function(modl, df ) {
predicted <- predict(modl, type = "response", newdata = df, allow.new.levels = T)
truth <- df$correct
return(mean((predicted-truth)^2))
}
SBrierScore <- function(modl, df) {
predicted <- predict(modl, type = "response", newdata = df, allow.new.levels = T)
truth <- df$correct
Bs <- mean((predicted-truth)^2)
Bmax <- mean(predicted) * (1-mean(predicted))
return(1 - Bs/Bmax)
}
#Bootwork er svo aðal Bootstrap fallið
# Þarf að manually setja inn glmer fallið sem maður þarf þar inni
Bootwork <- function(df, iteration){
options(contrasts = c("contr.sum", "contr.poly"))
#Byrjum fyrst að keyra það fyrir upprunalega gagnasafnið
ormodel <- glmer(correct ~ fsfat*hsta + nicc + gpow + lectureId + (1 | studentId), family = binomial(link = "logit"),
data = df, nAGQ = 0, control=glmerControl(optimizer="bobyqa",optCtrl=list(maxfun=2e5)))
original <- data.frame(brier = BrierScore(ormodel, df),
StanBrier = SBrierScore(ormodel, df),
AUC = AUC(predict(ormodel, type = "response"), df$correct))
#Bý til nýjann grunn til að safna saman efnið frá bootstrappinu
bootel <- data.frame(brier = numeric(0), StanBrier = numeric(0), AUC = numeric(0))
bootel.or <- data.frame(brier = numeric(0), StanBrier = numeric(0), AUC = numeric(0))
print('It begun')
for (i in 1:iteration){
#Bý til nýtt safn með bootstrap
print(paste0(round(i/iteration * 100, digits = 1), "%"))
Bdf <- bootcreate(df)
#Bý til model fyrir þetta bootstrap
#Bmodel <- Funmod(Bdf)
Bmodel <- glmer(correct ~ fsfat*hsta + nicc + gpow + lectureId + (1 | studentId), family = binomial(link = "logit"),
data = Bdf, nAGQ = 0, control=glmerControl(optimizer="bobyqa",optCtrl=list(maxfun=2e5)))
#Reiknað breyturnar sem það þarf að reikna
Nadditions <- data.frame(brier = BrierScore(Bmodel, Bdf),
StanBrier = SBrierScore(Bmodel, Bdf),
AUC = AUC(predict(Bmodel, type = "response"), Bdf$correct))
#Reiknað C.or eða original additions
Nadditions.or <- data.frame(brier = BrierScore(Bmodel, df),
StanBrier = SBrierScore(Bmodel, df),
AUC = AUC(predict(Bmodel, type = "response", newdata = df, allow.new.levels = T), df$correct))
#Geyma efnið í gagnasafninu
bootel <- rbind(bootel, Nadditions)
bootel.or <- rbind(bootel.or, Nadditions.or)
# rm(Bmodel)
}
#skila original og bootel
return(list(original, bootel, bootel.or))
}
set.seed(117)
bootedfit1 <- Bootwork(hashTest2, 2500)
save(bootedfit1, file = "Data/Bootedfit1")
save(bootedfit1, file = "Data/Bootedfit1")
#Fyrst eru það þægilegu dplyr og tidyr föllin. Svo RMySQL til að fá aðgang á SQL
library(dbplyr)
library(dplyr)
library(RMySQL)
library(tidyr)
#Hvað gerir MASS aftur?
library(MASS)
#GGplot gott til að teikna
library(ggplot2)
library(gridExtra)
#Tidyverse er geðveikt
library(tidyverse)
#modelr var fyrir %$% skipanir minnist mig
library(modelr)
#hvað gerir rlang aftur?
library(rlang)
#lme4 og lmerTest er fyrir glmer og fleira þægilegt
library(lme4)
library(lmerTest)
#Car er til að geta notað Anova
library(car)
#cAIC4 er svo það sé hægt að prufa stepcAIC, svo stepAIC fyrir glmer fallið, mun líklega ekki nota, tekur of langan tíma
library(cAIC4)
#til að geta gert trapz fyrir AUC í ROC
library(pracma)
#Bootstrapping pakki
library(boot)
#Fyrir AUC reikninga
library(cvAUC)
#Annaðhvort þeirra gefur mem_used() til að skoða hve mikið af mininnu er notað
library(pryr)
hashAnswer <- read.csv('Data/hashAnswer4.csv')
hashAnswer <- hashAnswer %>% subset(select=-c(X))
hashAnswer$hsta <- hashAnswer$hsta%>%as.character()
hashAnswer$lectureId <- hashAnswer$lectureId %>% as.factor()
hashAnswer$studentId <- hashAnswer$studentId %>% as.factor()
hashAnswer$nicc <- hashAnswer$nicc %>% as.factor()
hashAnswer$fsfat <- hashAnswer$fsfat/10
hashAnswer$fsvfatu <- hashAnswer$fsvfatu/10
hashAnswer$hluta2 <- cut_interval(hashAnswer$hluta, n = 5)
hashTest2 <- hashAnswer %>% group_by(studentId) %>% mutate("count" = n()) %>%
filter(count > 7 & fsfat < 10)
#þetta er fall sem er að búa til nýtt bootstrapped gagnasafn til að geta keyrt restina í
bootcreate <- function(df) {
#Búið til nested gagnasafn til að geta tekið fyrir hvern nemenda
dfnest <- df %>% group_by(lectureId, studentId) %>% nest()
bootmade <- NULL
#Lykkja til að setja saman gagnasafnið, ýtrar fyrir hvern fyrirlestur og finnur jafnmarga nemendur aftur
for (id in unique(dfnest$lectureId)) {
dftemp <- dfnest %>% filter(lectureId == id)
ni <- dftemp$studentId %>% n_distinct()
takenNr <- sample(1:ni, replace = TRUE)
notnest <- dftemp[takenNr, ] %>% unnest(cols = c(data))
bootmade <- rbind(bootmade, notnest)
}
return(bootmade)
}
#smá fall til að reikna BrierScoreið
BrierScore <- function(modl, df ) {
predicted <- predict(modl, type = "response", newdata = df, allow.new.levels = T)
truth <- df$correct
return(mean((predicted-truth)^2))
}
SBrierScore <- function(modl, df) {
predicted <- predict(modl, type = "response", newdata = df, allow.new.levels = T)
truth <- df$correct
Bs <- mean((predicted-truth)^2)
Bmax <- mean(predicted) * (1-mean(predicted))
return(1 - Bs/Bmax)
}
#Bootwork er svo aðal Bootstrap fallið
# Þarf að manually setja inn glmer fallið sem maður þarf þar inni
Bootwork <- function(df, iteration){
options(contrasts = c("contr.sum", "contr.poly"))
#Byrjum fyrst að keyra það fyrir upprunalega gagnasafnið
ormodel <- glmer(correct ~ hluta2+hsta + nicc + gpow + lectureId + (1 | studentId), family = binomial(link = "logit"),
data = df, nAGQ = 0, control=glmerControl(optimizer="bobyqa",optCtrl=list(maxfun=2e5)))
original <- data.frame(brier = BrierScore(ormodel, df),
StanBrier = SBrierScore(ormodel, df),
AUC = AUC(predict(ormodel, type = "response"), df$correct))
#Bý til nýjann grunn til að safna saman efnið frá bootstrappinu
bootel <- data.frame(brier = numeric(0), StanBrier = numeric(0), AUC = numeric(0))
bootel.or <- data.frame(brier = numeric(0), StanBrier = numeric(0), AUC = numeric(0))
print('It begun')
for (i in 1:iteration){
#Bý til nýtt safn með bootstrap
print(paste0(round(i/iteration * 100, digits = 1), "%"))
Bdf <- bootcreate(df)
#Bý til model fyrir þetta bootstrap
#Bmodel <- Funmod(Bdf)
Bmodel <- glmer(correct ~ hluta2+hsta + nicc + gpow + lectureId + (1 | studentId), family = binomial(link = "logit"),
data = Bdf, nAGQ = 0, control=glmerControl(optimizer="bobyqa",optCtrl=list(maxfun=2e5)))
#Reiknað breyturnar sem það þarf að reikna
Nadditions <- data.frame(brier = BrierScore(Bmodel, Bdf),
StanBrier = SBrierScore(Bmodel, Bdf),
AUC = AUC(predict(Bmodel, type = "response"), Bdf$correct))
#Reiknað C.or eða original additions
Nadditions.or <- data.frame(brier = BrierScore(Bmodel, df),
StanBrier = SBrierScore(Bmodel, df),
AUC = AUC(predict(Bmodel, type = "response", newdata = df, allow.new.levels = T), df$correct))
#Geyma efnið í gagnasafninu
bootel <- rbind(bootel, Nadditions)
bootel.or <- rbind(bootel.or, Nadditions.or)
# rm(Bmodel)
}
#skila original og bootel
return(list(original, bootel, bootel.or))
}
set.seed(118)
bootedfit3 <- Bootwork(hashTest2, 2500)
save(bootedfit3, file = "Data/Bootedfit3")
save(bootedfit3, file = "Data/Bootedfit3")
